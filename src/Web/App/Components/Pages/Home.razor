@page "/"
@using Microsoft.JSInterop
@using System.Diagnostics
@using System.Text.Json
@using WhereToFly.Geo.Model
@using WhereToFly.WebApi.Logic
@inject IJSRuntime JS
@inject IConfiguration Configuration
@inject LocationFindManager LocationFindManager

<PageTitle>Where-To-Fly Web App</PageTitle>

<div id="content">
    <div id="mapElement" class="map-element-fullscreen"></div>

    <div class="toolbar-container toolbar-container-halftransparent">
        <div id="liveTrackToolbar" class="livetrack-toolbar-container" style="display:none; bottom:130px"></div>
        <div id="heightProfileView" class="chart-and-toolbar-container chart-and-toolbar-container-outer" style="display:none"></div>
    </div>
</div>

<script type="text/javascript">

    /**
     * Gets options object for initializing the App
     */
    async function getAppOptions(referenceToThis) {
        return {
            mapElementId: 'mapElement',
            liveTrackToolbarId: "liveTrackToolbar",
            heightProfileElementId: "heightProfileView",
            apiKeys: await referenceToThis.invokeMethodAsync("GetApiKeys"),
            callback: (action, params) => callbackToDotNet(referenceToThis, action, params)
        }
    }

    /**
     * Calls back to the razor page
     */
    function callbackToDotNet(referenceToThis, action, params) {
        referenceToThis.invokeMethodAsync(
            'OnAction',
            {
                action,
                params: (params === null ? "" : JSON.stringify(params))
            });
    }

</script>

@code {

    /// <summary>
    /// Reference to the JavaScript App instance
    /// </summary>
    IJSObjectReference app;

    /// <summary>
    /// Called after the razor page has finished rendering
    /// </summary>
    /// <param name="firstRender">when true, it's the first render</param>
    /// <returns>task to wait on</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // https://jonhilton.net/import-js-modules/
            IJSObjectReference module =
                await JS.InvokeAsync<IJSObjectReference>(
                    "import",
                    "./js/app.bundle.js");

            var referenceToThis = DotNetObjectReference.Create(this);

            IJSObjectReference options =
                await JS.InvokeAsync<IJSObjectReference>(
                    "getAppOptions",
                    referenceToThis);

            this.app =
                await module.InvokeAsync<IJSObjectReference>("default", options);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Returns API keys
    /// </summary>
    /// <returns>object with all API keys</returns>
    [JSInvokable("GetApiKeys")]
    public object GetApiKeys()
    {
        return new
        {
            cesiumIonApiKey = Configuration["CESIUM_ION_API_KEY"],
        };
    }

    /// <summary>
    /// Callback action infos
    /// </summary>
    public class ActionInfo
    {
        /// <summary>
        /// Callback action
        /// </summary>
        public string Action { get; set; } = string.Empty;

        /// <summary>
        /// Action parameters as JSON
        /// </summary>
        public string? Params { get; set; }
    }

    /// <summary>
    /// Called when the JavaScript code calls back to .NET
    /// </summary>
    /// <param name="actionInfo">action info</param>
    /// <returns>task to wait on</returns>
    [JSInvokable("OnAction")]
    public async Task OnAction(ActionInfo actionInfo)
    {
        Debug.WriteLine($"OnAction: action={actionInfo.Action} params={actionInfo.Params}");

        switch (actionInfo.Action)
        {
            case "onMapMoved":
                if (actionInfo.Params != null)
                {
                    var rectangle = JsonSerializer.Deserialize(
                        actionInfo.Params,
                        Geo.Serializers.GeoModelJsonSerializerContext.Default.MapRectangle);

                    if (rectangle != null)
                    {
                        await this.OnMapMoved(rectangle);
                    }
                }

                break;

            default:
                break;
        }
    }

    /// <summary>
    /// Cache for lat/long tuples for nearby POIs already loaded
    /// </summary>
    private readonly HashSet<(int, int)> nearbyPoiLatLongCache = new();

    /// <summary>
    /// Called when the "onMapMoved" action is received
    /// </summary>
    /// <returns>task to wait on</returns>
    private async Task OnMapMoved(MapRectangle rectangle)
    {
        if (!rectangle.Valid ||
            rectangle.Width > 2.0 ||
            rectangle.Height > 2.0)
        {
            return;
        }

        MapPoint center = rectangle.Center;

        int latitudeInt = (int)center.Latitude;
        int longitudeInt = (int)center.Longitude;

        var latLongKey = (latitudeInt, longitudeInt);

        if (this.nearbyPoiLatLongCache.Contains(latLongKey))
        {
            return;
        }

        this.nearbyPoiLatLongCache.Add(latLongKey);

        var locationList = await LocationFindManager.GetInRectAsync(
            latitudeInt,
            longitudeInt);

        await this.AddLocationList(locationList);
    }

    /// <summary>
    /// Called when the JavaScript code calls back to .NET
    /// </summary>
    /// <param name="locationList">location list</param>
    /// <returns>task to wait on</returns>
    private async Task AddLocationList(IEnumerable<Location> locationList)
    {
        if (!locationList.Any())
        {
            return;
        }

        var jsonLocationList =
            from location in locationList
            select CreateJsonObjectFromLocation(location);

        await this.app.InvokeVoidAsync("addLocationList", jsonLocationList);
    }

    /// <summary>
    /// Creates a C# object suitable for conversion to JSON, in order to use in a JavaScript
    /// call.
    /// </summary>
    /// <param name="location">location to convert</param>
    /// <returns>C# object</returns>
    private static object CreateJsonObjectFromLocation(Location location)
    {
        return new
        {
            id = location.Id,
            name = location.Name,
            description = location.Description,
            type = location.Type.ToString(),
            latitude = location.MapLocation.Latitude,
            longitude = location.MapLocation.Longitude,
            altitude = location.MapLocation.Altitude.GetValueOrDefault(0.0),
            takeoffDirections = (int)location.TakeoffDirections,
            isPlanTourLocation = location.IsPlanTourLocation,
            properties = location.Properties.ToDictionary(kvp => kvp.Key.ToString(), kvp => kvp.Value),
        };
    }
}
