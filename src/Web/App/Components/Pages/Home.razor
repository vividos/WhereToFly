@page "/"
@using Microsoft.JSInterop
@using System.Diagnostics
@inject IJSRuntime JS

<PageTitle>Where-To-Fly Web App</PageTitle>

<div id="content">
    <div id="mapElement" class="map-element-fullscreen"></div>

    <div class="toolbar-container toolbar-container-halftransparent">
        <div id="liveTrackToolbar" class="livetrack-toolbar-container" style="display:none; bottom:130px"></div>
        <div id="heightProfileView" class="chart-and-toolbar-container chart-and-toolbar-container-outer" style="display:none"></div>
    </div>
</div>

<script type="text/javascript">

    /**
     * Gets options object for initializing the App
     */
    function getAppOptions(referenceToThis) {
        return {
            mapElementId: 'mapElement',
            liveTrackToolbarId: "liveTrackToolbar",
            heightProfileElementId: "heightProfileView",
            callback: (action, params) => callbackToDotNet(referenceToThis, action, params)
        }
    }

    /**
     * Calls back to the razor page
     */
    function callbackToDotNet(referenceToThis, action, params) {
        referenceToThis.invokeMethodAsync(
            'OnAction',
            {
                action,
                params: (params === null ? "" : JSON.stringify(params))
            });
    }

</script>

@code {

    /// <summary>
    /// Called after the razor page has finished rendering
    /// </summary>
    /// <param name="firstRender">when true, it's the first render</param>
    /// <returns>task to wait on</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // https://jonhilton.net/import-js-modules/
            IJSObjectReference module =
                await JS.InvokeAsync<IJSObjectReference>(
                    "import",
                    new object[]
                    {
                        "./js/app.bundle.js"
                    });

            var referenceToThis = DotNetObjectReference.Create(this);

            IJSObjectReference options =
                await JS.InvokeAsync<IJSObjectReference>(
                    "getAppOptions",
                    referenceToThis);

            await module.InvokeVoidAsync("default", options);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Callback action infos
    /// </summary>
    public class ActionInfo
    {
        /// <summary>
        /// Callback action
        /// </summary>
        public string Action { get; set; } = string.Empty;

        /// <summary>
        /// Action parameters as JSON
        /// </summary>
        public string? Params { get; set; }
    }

    /// <summary>
    /// Called when the JavaScript code calls back to .NET
    /// </summary>
    /// <param name="actionInfo">action info</param>
    [JSInvokable("OnAction")]
    public void OnAction(ActionInfo actionInfo)
    {
        Debug.WriteLine($"OnAction: action={actionInfo.Action} params={actionInfo.Params}");
    }
}
